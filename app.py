import streamlit as st
import openai
import os
from dotenv import load_dotenv
from PIL import Image

# Cargar las variables de entorno desde .env
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")

# Configuraci√≥n de la p√°gina
st.set_page_config(page_title="AnuncioProAI", page_icon="üè°", layout="centered")

# T√≠tulo en una sola l√≠nea
col1, col2 = st.columns([1, 5])  # Crear dos columnas
with col1:
    st.image("yo.jpg", width=500)  # Ajusta la ruta y el tama√±o de la imagen
with col2:
    st.markdown("<h1 style='text-align: center;'>üè° AnuncioProAI: Creador de anuncios inmobiliarios</h1>", unsafe_allow_html=True)


# Secci√≥n de datos del inmueble
st.subheader("üìã Caracter√≠sticas del inmueble")
tipo = st.selectbox("Tipo de propiedad", [
    "Piso", "√Åtico", "D√∫plex", "Estudio / loft", "Casa", "Chalet", "Adosado", 
    "Bungalow", "Piso de protecci√≥n oficial (VPO)", "Finca/Rural","Cortijo", "Local comercial", 
    "Oficina", "Nave industrial", "Terreno", "Mansi√≥n"
])
estado = st.selectbox("Estado", ["A demoler","A reformar", "Buen estado", "Como nuevo", "Nuevo"])
m2 = st.number_input("m¬≤ construidos", min_value=10, max_value=30000)
m2_utiles = st.number_input("m¬≤ √∫tiles", min_value=10, max_value=30000)
m2_terreno = st.number_input("m¬≤ de terreno", min_value=0, max_value=30000)
habitaciones = st.number_input("N√∫mero de habitaciones", min_value=0, max_value=50)
ba√±os = st.number_input("N√∫mero de ba√±os", min_value=0, max_value=10)
fachada = st.radio("Fachada", ["Exterior", "Interior"])
ascensor = st.radio("¬øTiene ascensor?", ["S√≠ tiene", "No tiene"])
certificado = st.selectbox("Calificaci√≥n energ√©tica", ["A", "B", "C", "D", "E", "F", "G"])
orientacion = st.selectbox("Orientaci√≥n", [
    "Norte", "Sur", "Este", "Oeste", 
    "Noreste", "Noroeste", 
    "Sureste", "Suroeste"
])

# Selecci√≥n de tipos de suelo
st.subheader("ü™µ Tipos de suelo")
suelo_interior = st.selectbox("Tipo de suelo en el interior", [
    "Parquet", "Tarima flotante", "Baldosa cer√°mica", "M√°rmol", "Granito", "Vin√≠lico", "Moqueta", "Cemento pulido", "Laminado", "Corcho"
])
suelo_exterior = st.selectbox("Tipo de suelo en el exterior", [
    "Grava", "Pavimento de adoqu√≠n", "Hormig√≥n", "Terracota", "Decking de madera", "Piedra natural", "C√©sped artificial", "Pavimento permeable"
])

# Caracter√≠sticas adicionales
st.subheader("‚ú® Extras")
extras_vivienda = st.multiselect("Caracter√≠sticas de la vivienda", [
    "Amueblado", "Armarios empotrados", "Aire acondicionado", "Terraza", "Balc√≥n", "Trastero", "Plaza de garaje"])
extras_edificio = st.multiselect("Caracter√≠sticas del edificio", ["Piscina", "Zona verde"])

# Solicitar metros cuadrados si se seleccionan terraza, balc√≥n, trastero o plaza de garaje
metros_terraza = 0
metros_balcon = 0
metros_trastero = 0
metros_garaje = 0

if "Terraza" in extras_vivienda:
    metros_terraza = st.number_input("Metros cuadrados de la terraza", min_value=1, max_value=1000)
if "Balc√≥n" in extras_vivienda:
    metros_balcon = st.number_input("Metros cuadrados del balc√≥n", min_value=1, max_value=1000)
if "Trastero" in extras_vivienda:
    metros_trastero = st.number_input("Metros cuadrados del trastero", min_value=1, max_value=1000)
if "Plaza de garaje" in extras_vivienda:
    metros_garaje = st.number_input("Metros cuadrados de la plaza de garaje", min_value=1, max_value=1000)

# Localizaci√≥n del inmueble y descripci√≥n de los servicios cercanos
st.subheader("üìç Localizaci√≥n y servicios cercanos")

# Inputs para la localizaci√≥n del inmueble
ubicacion = st.text_input("üìç Direcci√≥n del inmueble", "Introduce la direcci√≥n del inmueble aqu√≠")

# Inputs para los servicios cercanos
servicios_cercanos = st.multiselect(
    "Selecciona los servicios cercanos", 
    ["Centro m√©dico", "Colegios", "Centros comerciales", "Transporte p√∫blico", "Parques", "Tiendas y restaurantes", "Gimnasios", "Farmacias", "Estaciones de tren", "Aeropuerto"]
)

# Selecci√≥n si est√° cerca de la playa o monta√±a
cerca_playa = st.checkbox("Cerca de la playa")
cerca_montana = st.checkbox("Cerca de la monta√±a")

# Distancia a la playa o monta√±a (solo si se ha seleccionado una de las dos opciones)
distancia_playa = None
distancia_montana = None
if cerca_playa:
    distancia_playa = st.number_input("¬øA qu√© distancia est√° la playa (en metros)?", min_value=0, step=10)
if cerca_montana:
    distancia_montana = st.number_input("¬øA qu√© distancia est√° la monta√±a (en metros)?", min_value=0, step=10)

# Descripci√≥n de los servicios cercanos
descripcion_servicios = "Estos son los servicios cercanos a la propiedad: "
if servicios_cercanos:
    descripcion_servicios += ", ".join(servicios_cercanos)
else:
    descripcion_servicios = "No se han seleccionado servicios cercanos."

# Descripci√≥n de la cercan√≠a a la playa o monta√±a
descripcion_cercania = ""
if cerca_playa:
    descripcion_cercania = f"Est√° a {distancia_playa} metros de la playa."
elif cerca_montana:
    descripcion_cercania = f"Est√° a {distancia_montana} metros de la monta√±a."

# Mostrar la informaci√≥n recopilada
st.write(f"üîë **Direcci√≥n**: {ubicacion}")
st.write(f"üèô **Servicios cercanos**: {descripcion_servicios}")
if descripcion_cercania:
    st.write(f"üåä/üèû **Cercan√≠a**: {descripcion_cercania}")


# Precio y situaci√≥n legal
st.subheader("üí∂ Precio y situaci√≥n")
precio = st.number_input("Precio del inmueble (‚Ç¨)", min_value=0)
gastos = st.number_input("Gastos de comunidad (‚Ç¨ / mes)", min_value=0)
situacion = st.selectbox("¬øSituaci√≥n excepcional?", [
    "No, en ninguna situaci√≥n excepcional", "Ocupada ilegalmente", "Alquilada, con inquilinos", "Nuda propiedad"])

# preguntar al usuario si quiere a√±adir alguna informacion adicional de la propiedad que sea relevante
st.subheader("üìù Informaci√≥n adicional")
informacion_adicional = st.text_area("¬øHay algo m√°s que quieras a√±adir sobre la propiedad?")
if informacion_adicional:
    st.write("Informaci√≥n adicional:", informacion_adicional)

# **Nuevo**: Cargar im√°genes o planos
st.subheader("üì∏ A√±adir im√°genes o planos del inmueble")
uploaded_files = st.file_uploader("Sube fotos o planos", type=["jpg", "jpeg", "png", "pdf"], accept_multiple_files=True)

# Si se suben archivos, mostrar las im√°genes
if uploaded_files:
    st.write("Archivos subidos:")
    for uploaded_file in uploaded_files:
        if uploaded_file.type in ["image/jpeg", "image/png"]:
            image = Image.open(uploaded_file)
            st.image(image, caption=uploaded_file.name, use_column_width=True)
        else:
            st.write(f"Archivo {uploaded_file.name} cargado correctamente.")

# A√±adir una secci√≥n para que el usuario seleccione el destino del anuncio
st.subheader("üì£ Selecciona el destino del anuncio")
destino = st.radio(
    "¬øD√≥nde quieres publicar el anuncio?",
    ("Portales inmobiliarios (Idealista, Fotocasa, Milanuncios)", "Redes sociales (Facebook, Instagram)")
)

# Bot√≥n para generar el anuncio
if st.button("üìù Generar anuncio"):
    with st.spinner("Generando anuncio..."):
        try:
            # Preparar mensaje para la IA seg√∫n el destino
            if destino == "Portales inmobiliarios (Idealista, Fotocasa, Milanuncios)":
                mensaje_usuario = f"""
Redacta un anuncio inmobiliario profesional, emocional y altamente persuasivo para publicar en Idealista, Fotocasa, Milanuncios y otros portales inmobiliarios.

Datos del inmueble:
- Tipo de propiedad: {tipo}
- Estado: {estado}
- Superficie: {m2} m¬≤
- Habitaciones: {habitaciones}
- Ba√±os: {ba√±os}
- Fachada: {fachada}
- Ascensor: {ascensor}
- Certificaci√≥n energ√©tica: {certificado}
- Orientaci√≥n: {orientacion}
- Precio: {precio} ‚Ç¨
- Gastos de comunidad: {gastos} ‚Ç¨/mes
- Situaci√≥n legal: {situacion}

Extras:
- Piscina: {"S√≠" if "Piscina" in extras_edificio else "No"}
- Terraza: {"S√≠" if "Terraza" in extras_vivienda else "No"}
- Patio: {"No"}  # Default value as no input is provided for patio
- Cercan√≠a al mar: {"No"}  # Default value as no input is provided for proximity to the sea
- Zonas comerciales cercanas: {"No"}  # Default value as no input is provided for commercial zones
- Colegios cercanos: {"No"}  # Default value as no input is provided for nearby schools
- Tiendas y restaurantes cercanos: {"No"}  # Default value as no input is provided for nearby shops/restaurants

Por favor, destaca todos estos aspectos, especialmente la piscina, la terraza, la cercan√≠a al mar y las zonas comerciales cercanas. Crea un anuncio largo, detallado y persuasivo, resalta los beneficios emocionales de vivir en esta propiedad (luz, vistas, tranquilidad, ubicaci√≥n) y termina con una llamada a la acci√≥n clara, enfocada en atraer al comprador ideal para esta propiedad.
"""

            elif destino == "Redes sociales (Facebook, Instagram)":
                mensaje_usuario = f"""
Redacta un anuncio inmobiliario atractivo y persuasivo, adecuado para publicar en redes sociales como Facebook e Instagram. El anuncio debe ser corto, visualmente impactante y emocionalmente atractivo.

Datos del inmueble:
- Tipo de propiedad: {tipo}
- Estado: {estado}
- Superficie: {m2} m¬≤
- Habitaciones: {habitaciones}
- Ba√±os: {ba√±os}
- Precio: {precio} ‚Ç¨
- Extras destacados: {', '.join(extras_vivienda) if extras_vivienda else 'Ninguno'}

Extras clave a destacar para este anuncio:
- Piscina: {"S√≠" if "Piscina" in extras_edificio else "No"}
- Terraza: {"S√≠" if "Terraza" in extras_vivienda else "No"}
- Cercan√≠a al mar: {"No"}  # Default value as no input is provided for proximity to the sea
- Zonas comerciales cercanas: {"No"}  # Default value as no input is provided for commercial zones

Crea un anuncio breve, directo y emocional, destacando las caracter√≠sticas m√°s atractivas de la propiedad, como la piscina, la terraza y la cercan√≠a al mar. Usa frases cortas, im√°genes visuales y una llamada a la acci√≥n clara, invitando a los usuarios a visitar la propiedad.
"""

            # Llamada a OpenAI usando el endpoint adecuado (v1/chat/completions)
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",  # O el modelo que tengas disponible
                messages=[ 
                    {
                        "role": "system",
                        "content": (
                            "Eres el mayor experto en anuncios inmobiliarios, especializado en marketing emocional y persuasivo. "
                            "Debes crear anuncios que resalten los aspectos m√°s atractivos de las propiedades, como piscina, terraza, cercan√≠a al mar, "
                            "zonas comerciales cercanas, y la calidad de vida en la zona. Utiliza un tono atractivo y emocionante para captar la atenci√≥n de los compradores, que no sean demasiado largos, pero que sean informativos y persuasivos. "
                            "Recuerda que el objetivo es atraer al comprador ideal para esta propiedad."
                        )
                    },
                    {
                        "role": "user",
                        "content": mensaje_usuario
                    }
                ]
            )

            anuncio = response['choices'][0]['message']['content']
            st.success("‚úÖ Anuncio generado con √©xito")
            st.text_area("‚úçÔ∏è Anuncio generado:", value=anuncio, height=300)
        
        except Exception as e:
            st.error(f"‚ùå Ocurri√≥ un error: {e}") 